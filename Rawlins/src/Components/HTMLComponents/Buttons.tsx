import { useState } from "react";

export function Buttons(data: any) {
  const [disabledValue, setDisabledValue] = useState(false);
  // console.log(data);

  // const len = data?.record?.msg?.chatConversation?.length;
  // console.log(len);

  const bindchoics = () => {
    return data?.record.value.map((val: any, index: any) => (
      <>
        {" "}
        <button
          id={val.options}
          disabled={disabledValue}
          className={disabledValue ? "btn-disabled" : "ai-button-style"}
          onClick={(e: any) => {
            if (e.target.id == "My Orders") {
              setDisabledValue(true);
              data.record.func("Show my latest orders", "btn");
            } else if (e.target.id == "Product Review") {
              setDisabledValue(true);
              data.record.func("Show me the review of the product", "btn");
            } else if (e.target.id == "My cart") {
              setDisabledValue(true);
              data.record.func(
                "List my cart Items",
                "btn"
              );
            } else {
              setDisabledValue(true);
              data.record.func(e.target.id, "btn");
            }
          }}
        >
          {val.options}
        </button>
      </>
    ));
  };
  return <>{bindchoics()}</>;
}
