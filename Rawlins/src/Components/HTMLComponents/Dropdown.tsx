// import React, { useState, useEffect, useRef } from "react";

// export function DropDown(data: any) {
//   const [isOpen, setIsOpen] = useState(false);
//   const [searchTerm, setSearchTerm] = useState("");
//   const [selectedOption, setSelectedOption] = useState("");
//   const [filteredOptions, setFilteredOptions] = useState(data?.record.value || []);
//   const [isDisabled, setIsDisabled] = useState(false);
//   const dropdownRef = useRef<HTMLDivElement>(null);

//   useEffect(() => {
//     const filtered = data?.record.value.filter((val: any) =>
//       val.options.toLowerCase().includes(searchTerm.toLowerCase())
//     );
//     setFilteredOptions(filtered);
//   }, [searchTerm, data?.record.value]);

//   useEffect(() => {
//     const handleClickOutside = (event: MouseEvent) => {
//       if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
//         setIsOpen(false);
//       }
//     };

//     document.addEventListener("mousedown", handleClickOutside);
//     return () => {
//       document.removeEventListener("mousedown", handleClickOutside);
//     };
//   }, []);

//   const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
//     if (!isDisabled) {
//       setSearchTerm(e.target.value);
//       setIsOpen(true);
//     }
//   };

//   const handleOptionClick = (option: string) => {
//     setSelectedOption(option);
//     setSearchTerm(option);
//     setIsOpen(false);
//     setIsDisabled(true);
//     data.record.func(option, "drpdwn");
//   };

//   return (
//     <div className="dropdown-container" ref={dropdownRef}>
//       <input
//         type="text"
//         className={`dropdown-input ${isDisabled ? 'disabled' : ''}`}
//         value={searchTerm}
//         onChange={handleInputChange}
//         onClick={() => !isDisabled && setIsOpen(true)}
//         placeholder="Select or search..."
//         disabled={isDisabled}
//       />
//       {isOpen && !isDisabled && (
//         <ul className="dropdown-menu">
//           {filteredOptions.length > 0 ? (
//             filteredOptions.map((val: any, index: number) => (
//               <li
//                 key={index}
//                 onClick={() => handleOptionClick(val.options)}
//               >
//                 {val.options}
//               </li>
//             ))
//           ) : (
//             <li>No options found</li>
//           )}
//         </ul>
//       )}
//     </div>
//   );
// }


import React, { useState, useEffect, useRef } from "react";

export function DropDown(data: any) {
  const [isOpen, setIsOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedOption, setSelectedOption] = useState("");
  const [filteredOptions, setFilteredOptions] = useState(data?.record?.value || []);
  const [isDisabled, setIsDisabled] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const filtered = data?.record?.value?.filter((item: any) =>
      item.options.toLowerCase().includes(searchTerm.toLowerCase())
    ) || [];
    setFilteredOptions(filtered);
  }, [searchTerm, data?.record?.value]);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!isDisabled) {
      setSearchTerm(e.target.value);
      setIsOpen(true);
    }
  };

  const handleOptionClick = (option: string) => {
    setSelectedOption(option);
    setSearchTerm(option);
    setIsOpen(false);
    setIsDisabled(true);
    data.record.func(option, "drpdwn");
  };

  return (
    <div className="dropdown-container" ref={dropdownRef}>
      <input
        type="text"
        className={`dropdown-input ${isDisabled ? 'disabled' : ''}`}
        value={searchTerm}
        onChange={handleInputChange}
        onClick={() => !isDisabled && setIsOpen(true)}
        placeholder="Select or search a color..."
        disabled={isDisabled}
      />
      {isOpen && !isDisabled && (
        <ul className="dropdown-menu">
          {filteredOptions.length > 0 ? (
            filteredOptions.map((item: any, index: number) => (
              <li
                key={index}
                onClick={() => handleOptionClick(item.options)}
                className="color-option"
              >
                <span 
                  className="color-swatch" 
                  style={{ backgroundColor: item.options.toLowerCase() }}
                ></span>
                {item.options}
              </li>
            ))
          ) : (
            <li>No colors found</li>
          )}
        </ul>
      )}
    </div>
  );
}